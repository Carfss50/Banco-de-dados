# -*- coding: utf-8 -*-
"""Exercício Final_GOOG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13fWlEX0jyMCei11YPteKVhLwpX7DZ4st

# **Exercício Final da Disciplina - BIG DATA, DATA ANALYTICS E FERRAMENTAS DE ANÁLISE DE DADOS IOT**

# Dado o dataset “GOOG.csv”, faça a análise dos dados e crie um modelo preditivo a partir de sua análise. Pode ser uma regressão ou classificação.

Alunos:
1.   Rafael de souza may
2.   Carlos felipe silva dos santos
  
Professor: FELLIPE SILVA MARTINS

**Carregando as bibliotecas para execução**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

"""**Carregando Data Frame com a base no arquivo "GOOG.csv"**"""

df_goog = pd.read_csv("GOOG.csv", sep=',')

# Listamos a dataframe carregado para uma visibilidade prévia de seu dados.
df_goog.head(5)

"""**Estatísticas gerais da base de dados**"""

print(">>> Informações gerais por atributo do dataframe...")
print("--------------------------------------------------------------------")
df_goog.info()

print("\n\n>>> Estatisticas gerais dos atributos numéricos do dataframe...")
print("--------------------------------------------------------------------")
df_goog.describe()

"""**Verificamos se temos dados faltantes.**"""

# Verificamos se temos dados faltantes
print(df_goog.isnull().mean())

if df_goog.isnull().mean().sum() == 0:
  print("\nComo todos os resultados foram 'zero' não temos dados faltantes para serem tratados.")

"""**Plotamos um gráfico com o valor de fechamento da ação por data**"""

# Copiamos as colunas a serem demonstradas
df_adj_date = df_goog[["date","close"]].copy()
# Ajustamos a data somente para yyyy-mm-dd
df_adj_date["date"] = pd.to_datetime(df_adj_date.date).dt.date

plt.figure(figsize = (16,8))
plt.title("Evolução das ações no decorrer do tempo")
plt.xlabel("Data de fechamento da ação")
plt.ylabel("Valor de fechamento")
plt.plot(df_adj_date.date, df_adj_date.close)
plt.show()

"""# Regra de avaliação por regressão linear múltipla para o fechamento da ação com base nos valores de alta e baixa no dia.

**Criação das bases de treinamento e teste.**
"""

# Criamos as bases x e y de origem.
x_df = df_goog[["date", "low", "high"]]
y_df = df_goog[["close"]]

# Criamos as bases a serem analisadas
x_train, x_test, y_train, y_test = train_test_split(x_df, y_df, test_size=0.25, random_state=42)

print("Bases de treinamento e testes após o split:")
print("x_train Shape : ", x_train.shape)
print("x_test Shape  : ", x_test.shape)
print("y_train Shape : ", y_train.shape)
print("y_test Shape  : ", y_test.shape)

"""**Utilizamos o modelo linear multiplo para treino**"""

# Criação do modelo de treino
modelo = LinearRegression()
modelo.fit(x_train[["low","high"]], y_train)

# Avaliação do modelo obtido
print("Avaliação do modelo obtido na regreção multipla:")
print("Score :", modelo.score(x_train[["low","high"]], y_train))
print("Intercept :", modelo.intercept_)
print("Coef :", modelo.coef_)

"""**Geração da base de previsão, baseado nos treinamentos.**"""

# Utilizando modelo treinado para predição
previsao = modelo.predict(x_test[["low","high"]])
print(previsao)

"""**Plotamos os fechamentos após a predição, com base nos testes e comparamos com os valores originais.**"""

# Copiamos as colunas a serem demonstradas
x_plot = x_test[["date"]].copy()
# Ajustamos a data somente para yyyy-mm-dd
x_plot["date"] = pd.to_datetime(x_plot.date).dt.date
# Concatenamos a previsão junto a dataframe que será utilizado nos plots.
x_plot["close"] = previsao
x_plot = x_plot.sort_index()

# Plotamos o gráfico comparando os valores originaius e os valores treinados
plt.figure(figsize = (16,8))
plt.title("Comparativo das ações no decorrer do tempo entre os valores originais x treinados")
plt.xlabel("Data de fechamento da ação")
plt.ylabel("Valor de predito")
plt.plot(df_adj_date.date, df_adj_date.close, color='red', label="Valores originais")
plt.plot(x_plot.date, x_plot.close, color='green', label="Valores preditos")
plt.legend()
plt.show()

"""**Mostramos os outliers para os valores preditos.**"""

# Plotamos o gráfico visualizando os outliers para os periodos de tempo
plt.figure(figsize = (16,8))
plt.title("Outliers dos valore preditos")
plt.xlabel("Data de fechamento da ação")
plt.ylabel("Valor de predito no decorrer do tempo")
plt.scatter(x_plot.date, x_plot.close, c = "green", marker = "s")
plt.show()

# Plotamos um bloxplot visualizando os outliers para os periodos de tempo
plt.figure(figsize = (16,8))
plt.title("Representação dos outliers do fechamento da ação")
plt.boxplot(x_plot.close)
plt.xlabel("Valor de predito para o fechamento")
plt.ylabel("Montante")
plt.show()